"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

type Detail {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  principle: Principle
  text: String!
  order: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Detail | Page | Principle | Step | Supporter | Team | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Page {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String
  slug: String!
}

type Principle {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  step: Step
  order: Int
  detail(sort: String, limit: Int, start: Int, where: JSON): [Detail]
}

type Query {
  detail(id: ID!): Detail
  details(sort: String, limit: Int, start: Int, where: JSON): [Detail]
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  principle(id: ID!): Principle
  principles(sort: String, limit: Int, start: Int, where: JSON): [Principle]
  step(id: ID!): Step
  steps(sort: String, limit: Int, start: Int, where: JSON): [Step]
  supporter(id: ID!): Supporter
  supporters(sort: String, limit: Int, start: Int, where: JSON): [Supporter]
  team(id: ID!): Team
  teams(sort: String, limit: Int, start: Int, where: JSON): [Team]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type Step {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  order: Int
  principle(sort: String, limit: Int, start: Int, where: JSON): [Principle]
}

"""List of all supporters"""
type Supporter {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  first_name: String!
  last_name: String!
  twitter_handle: String
  linkedin_handle: String
  github_handle: String
  validated: Boolean
}

"""Team's project"""
type Team {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  avatar: String
  position: String
}

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  role: UsersPermissionsRole
}
